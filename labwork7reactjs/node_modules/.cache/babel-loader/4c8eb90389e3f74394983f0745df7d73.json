{"ast":null,"code":"var _jsxFileName = \"/Users/egormartinovich/labwork7reactjs/src/components/Calendar/index.jsx\";\nimport React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport * as calendar from \"./calendar\";\nimport Note from \"../Note\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction logProps(WrappedComponent) {\n  return class extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log(\"Текущие пропсы: \", this.props);\n      console.log(\"Предыдущие пропсы: \", prevProps);\n    }\n\n    render() {\n      // Оборачиваем компонент в контейнер без мутаций. Супер!\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, { ...this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 14\n      }, this);\n    }\n\n  };\n}\n\nclass Calendar extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      date: this.props.date,\n      currentDate: new Date(),\n      selectedDate: null,\n      prevMonth: this.props.date.getMonth() - 1,\n      newNote: false\n    };\n\n    this.handlePrevMonthButtonClick = () => {\n      const date = new Date(this.year, this.month - 1);\n      this.setState({\n        date: date,\n        prevMonth: date\n      });\n    };\n\n    this.handleNextMonthButtonClick = () => {\n      const date = new Date(this.year, this.month + 1);\n      this.setState({\n        date: date,\n        prevMonth: date\n      });\n    };\n\n    this.handleSelectChange = () => {\n      const year = this.yearSelect.value;\n      const month = this.monthSelect.value;\n      const date = new Date(year, month);\n      this.setState({\n        date\n      });\n    };\n\n    this.handleDayClick = date => {\n      this.setState({\n        selectedDate: date\n      });\n      this.props.onChange(date);\n    };\n\n    this.handleDoubleClick = date => {\n      this.setState({\n        selectedDate: date,\n        newNote: true\n      });\n      this.props.onChange(date);\n      console.log(this.state.newNote);\n    };\n  }\n\n  get year() {\n    return this.state.date.getFullYear();\n  }\n\n  get month() {\n    return this.state.date.getMonth();\n  }\n\n  get day() {\n    return this.state.date.getDate();\n  }\n\n  render() {\n    const {\n      years,\n      monthNames,\n      weekDayNames\n    } = this.props;\n    const {\n      currentDate,\n      selectedDate,\n      date,\n      newNote\n    } = this.state;\n    const monthData = calendar.getMonthData(this.year, this.month);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handlePrevMonthButtonClick,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          ref: element => this.monthSelect = element,\n          value: this.month,\n          onChange: this.handleSelectChange,\n          children: monthNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: name\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          ref: element => this.yearSelect = element,\n          value: this.year,\n          onChange: this.handleSelectChange,\n          children: years.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: year\n          }, year, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleNextMonthButtonClick,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: weekDayNames.map(name => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: name\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: monthData.map((week, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"week\",\n            children: week.map((Date, index) => Date ? /*#__PURE__*/_jsxDEV(\"td\", {\n              className: classnames(\"day\", {\n                today: calendar.areEqual(Date, currentDate),\n                selected: calendar.areEqual(Date, selectedDate),\n                prevMonthDay: calendar.areNotEqual(Date, date)\n              }),\n              onClick: () => this.handleDayClick(Date),\n              onDoubleClick: () => this.handleDoubleClick(Date),\n              children: Date.getDate()\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"td\", {}, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 21\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), newNote === true ? /*#__PURE__*/_jsxDEV(Note, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nCalendar.defaultProps = {\n  date: new Date(),\n  years: [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022],\n  monthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\n  weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"],\n  onChange: Function.prototype\n};\nexport default Calendar;\n/*import React, { Component } from \"react\";\nimport * as calendar from \"./calendar\";\nimport \"./index.css\";\nimport classnames from \"classnames\";\nclass Calendar extends Component {\n  static defaultProps = {\n    date: new Date(),\n    years: [\n      2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,\n      2022,\n    ],\n    monthNames: [\n      \"Январь\",\n      \"Февраль\",\n      \"Март\",\n      \"Апрель\",\n      \"Май\",\n      \"Июнь\",\n      \"Июль\",\n      \"Август\",\n      \"Сентябрь\",\n      \"Октябрь\",\n      \"Ноябрь\",\n      \"Декабрь\",\n    ],\n    weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вc\"],\n    onChange: Function.prototype,\n  };\n  constructor(props) {\n    super(props);\n    this.handlePrevMonthButtonClick =\n      this.handlePrevMonthButtonClick.bind(this);\n    this.handleNextMonthButtonClick =\n      this.handleNextMonthButtonClick.bind(this);\n    this.handleSelectedChange = this.handleSelectedChange.bind(this);\n  }\n  state = {\n    date: this.props.date,\n    CurrentDate: new Date(),\n    selectedDate: null,\n  };\n  /*get year() {\n    return this.state.date.getFullYear();\n  }\n  get month() {\n    return this.state.date.getMonth();\n  }\n  handlePrevMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() - 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleNextMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() + 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleSelectedChange() {\n    const year = this.yearSelect.value;\n    const month = this.monthSelect.value;\n    const date = new Date(year, month);\n    console.log(date);\n    this.setState({ date });\n  }\n  handleDayClick(date) {\n    console.log(date);\n    this.setState({ selectedDate: date });\n\n    this.props.onChange(date);\n  }\n  render() {\n    const { years, monthNames, weekDayNames } = this.props;\n    const { CurrentDate, selectedDate } = this.props;\n    const monthData = calendar.getMonthData(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth()\n    );\n    return (\n      <div className=\"calendar\">\n        <header>\n          <button onClick={this.handlePrevMonthButtonClick}>{\"<\"}</button>\n          <select\n            value={this.state.date.getMonth()}\n            ref={(element) => (this.monthSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {monthNames.map((monthName, index) => (\n              <option key={monthName} value={index}>\n                {monthName}\n              </option>\n            ))}\n          </select>\n          <select\n            defaultValue={this.state.date.getFullYear()}\n            ref={(element) => (this.yearSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {years.map((yearName) => (\n              <option key={yearName} value={yearName}>\n                {yearName}\n              </option>\n            ))}\n          </select>\n          <button onClick={this.handleNextMonthButtonClick}>{\">\"}</button>\n        </header>\n        <table>\n          <thead>\n            <tr>\n              {weekDayNames.map((weekDay) => (\n                <td key={weekDay}>{weekDay}</td>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {monthData.map((week, index) => (\n              <tr key={index} className=\"week\">\n                {week.map((date, index) =>\n                  date ? (\n                    <td\n                      key={index}\n                      className={\n                        (classnames(\"day\"),\n                        {\n                          'today': calendar.areEqual(date, CurrentDate),\n                          'selected': calendar.areEqual(date, selectedDate),\n                        })\n                      }\n                      onClick={() => this.handleDayClick(date)}\n                    >\n                      {date.getDate()}\n                    </td>\n                  ) : (\n                    <td key={index} />\n                  )\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Calendar;*/","map":{"version":3,"sources":["/Users/egormartinovich/labwork7reactjs/src/components/Calendar/index.jsx"],"names":["React","Component","classnames","calendar","Note","logProps","WrappedComponent","componentDidUpdate","prevProps","console","log","props","render","Calendar","state","date","currentDate","Date","selectedDate","prevMonth","getMonth","newNote","handlePrevMonthButtonClick","year","month","setState","handleNextMonthButtonClick","handleSelectChange","yearSelect","value","monthSelect","handleDayClick","onChange","handleDoubleClick","getFullYear","day","getDate","years","monthNames","weekDayNames","monthData","getMonthData","element","map","name","index","week","today","areEqual","selected","prevMonthDay","areNotEqual","defaultProps","Function","prototype"],"mappings":"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":["import React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport * as calendar from \"./calendar\";\nimport Note from \"../Note\";\n\nimport \"./index.css\";\nfunction logProps(WrappedComponent) {\n  return class extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log(\"Текущие пропсы: \", this.props);\n      console.log(\"Предыдущие пропсы: \", prevProps);\n    }\n    render() {\n      // Оборачиваем компонент в контейнер без мутаций. Супер!\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n}\n\nclass Calendar extends React.Component {\n  static defaultProps = {\n    date: new Date(),\n    years: [\n      2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,\n      2022,\n    ],\n    monthNames: [\n      \"Январь\",\n      \"Февраль\",\n      \"Март\",\n      \"Апрель\",\n      \"Май\",\n      \"Июнь\",\n      \"Июль\",\n      \"Август\",\n      \"Сентябрь\",\n      \"Октябрь\",\n      \"Ноябрь\",\n      \"Декабрь\",\n    ],\n    weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"],\n    onChange: Function.prototype,\n  };\n\n  state = {\n    date: this.props.date,\n    currentDate: new Date(),\n    selectedDate: null,\n    prevMonth: this.props.date.getMonth() - 1,\n    newNote: false,\n  };\n\n  get year() {\n    return this.state.date.getFullYear();\n  }\n\n  get month() {\n    return this.state.date.getMonth();\n  }\n\n  get day() {\n    return this.state.date.getDate();\n  }\n\n  handlePrevMonthButtonClick = () => {\n    const date = new Date(this.year, this.month - 1);\n\n    this.setState({ date: date, prevMonth: date });\n  };\n\n  handleNextMonthButtonClick = () => {\n    const date = new Date(this.year, this.month + 1);\n\n    this.setState({ date: date, prevMonth: date });\n  };\n\n  handleSelectChange = () => {\n    const year = this.yearSelect.value;\n    const month = this.monthSelect.value;\n\n    const date = new Date(year, month);\n\n    this.setState({ date });\n  };\n\n  handleDayClick = (date) => {\n    this.setState({ selectedDate: date });\n\n    this.props.onChange(date);\n  };\n  handleDoubleClick = (date) => {\n    this.setState({ selectedDate: date, newNote: true });\n\n    this.props.onChange(date);\n    console.log(this.state.newNote);\n  };\n\n  render() {\n    const { years, monthNames, weekDayNames } = this.props;\n    const { currentDate, selectedDate, date, newNote } = this.state;\n\n    const monthData = calendar.getMonthData(this.year, this.month);\n\n    return (\n      <div className=\"calendar\">\n        <header>\n          <button onClick={this.handlePrevMonthButtonClick}>{\"<\"}</button>\n\n          <select\n            ref={(element) => (this.monthSelect = element)}\n            value={this.month}\n            onChange={this.handleSelectChange}\n          >\n            {monthNames.map((name, index) => (\n              <option key={name} value={index}>\n                {name}\n              </option>\n            ))}\n          </select>\n\n          <select\n            ref={(element) => (this.yearSelect = element)}\n            value={this.year}\n            onChange={this.handleSelectChange}\n          >\n            {years.map((year) => (\n              <option key={year} value={year}>\n                {year}\n              </option>\n            ))}\n          </select>\n\n          <button onClick={this.handleNextMonthButtonClick}>{\">\"}</button>\n        </header>\n\n        <table>\n          <thead>\n            <tr>\n              {weekDayNames.map((name) => (\n                <th key={name}>{name}</th>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {monthData.map((week, index) => (\n              <tr key={index} className=\"week\">\n                {week.map((Date, index) =>\n                  Date ? (\n                    <td\n                      key={index}\n                      className={classnames(\"day\", {\n                        today: calendar.areEqual(Date, currentDate),\n                        selected: calendar.areEqual(Date, selectedDate),\n                        prevMonthDay: calendar.areNotEqual(Date, date),\n                      })}\n                      onClick={() => this.handleDayClick(Date)}\n                      onDoubleClick={() => this.handleDoubleClick(Date)}\n                    >\n                      {Date.getDate()}\n                    </td>\n                  ) : (\n                    <td key={index} />\n                  )\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        {newNote === true ? <Note></Note> : null}\n      </div>\n    );\n  }\n}\nexport default Calendar;\n\n/*import React, { Component } from \"react\";\nimport * as calendar from \"./calendar\";\nimport \"./index.css\";\nimport classnames from \"classnames\";\nclass Calendar extends Component {\n  static defaultProps = {\n    date: new Date(),\n    years: [\n      2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,\n      2022,\n    ],\n    monthNames: [\n      \"Январь\",\n      \"Февраль\",\n      \"Март\",\n      \"Апрель\",\n      \"Май\",\n      \"Июнь\",\n      \"Июль\",\n      \"Август\",\n      \"Сентябрь\",\n      \"Октябрь\",\n      \"Ноябрь\",\n      \"Декабрь\",\n    ],\n    weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вc\"],\n    onChange: Function.prototype,\n  };\n  constructor(props) {\n    super(props);\n    this.handlePrevMonthButtonClick =\n      this.handlePrevMonthButtonClick.bind(this);\n    this.handleNextMonthButtonClick =\n      this.handleNextMonthButtonClick.bind(this);\n    this.handleSelectedChange = this.handleSelectedChange.bind(this);\n  }\n  state = {\n    date: this.props.date,\n    CurrentDate: new Date(),\n    selectedDate: null,\n  };\n  /*get year() {\n    return this.state.date.getFullYear();\n  }\n  get month() {\n    return this.state.date.getMonth();\n  }\n  handlePrevMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() - 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleNextMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() + 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleSelectedChange() {\n    const year = this.yearSelect.value;\n    const month = this.monthSelect.value;\n    const date = new Date(year, month);\n    console.log(date);\n    this.setState({ date });\n  }\n  handleDayClick(date) {\n    console.log(date);\n    this.setState({ selectedDate: date });\n\n    this.props.onChange(date);\n  }\n  render() {\n    const { years, monthNames, weekDayNames } = this.props;\n    const { CurrentDate, selectedDate } = this.props;\n    const monthData = calendar.getMonthData(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth()\n    );\n    return (\n      <div className=\"calendar\">\n        <header>\n          <button onClick={this.handlePrevMonthButtonClick}>{\"<\"}</button>\n          <select\n            value={this.state.date.getMonth()}\n            ref={(element) => (this.monthSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {monthNames.map((monthName, index) => (\n              <option key={monthName} value={index}>\n                {monthName}\n              </option>\n            ))}\n          </select>\n          <select\n            defaultValue={this.state.date.getFullYear()}\n            ref={(element) => (this.yearSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {years.map((yearName) => (\n              <option key={yearName} value={yearName}>\n                {yearName}\n              </option>\n            ))}\n          </select>\n          <button onClick={this.handleNextMonthButtonClick}>{\">\"}</button>\n        </header>\n        <table>\n          <thead>\n            <tr>\n              {weekDayNames.map((weekDay) => (\n                <td key={weekDay}>{weekDay}</td>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {monthData.map((week, index) => (\n              <tr key={index} className=\"week\">\n                {week.map((date, index) =>\n                  date ? (\n                    <td\n                      key={index}\n                      className={\n                        (classnames(\"day\"),\n                        {\n                          'today': calendar.areEqual(date, CurrentDate),\n                          'selected': calendar.areEqual(date, selectedDate),\n                        })\n                      }\n                      onClick={() => this.handleDayClick(date)}\n                    >\n                      {date.getDate()}\n                    </td>\n                  ) : (\n                    <td key={index} />\n                  )\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Calendar;*/\n"]},"metadata":{},"sourceType":"module"}