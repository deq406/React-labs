{"ast":null,"code":"var _jsxFileName = \"/Users/egormartinovich/labwork7reactjs/src/components/Calendar/index.jsx\";\nimport React from \"react\";\nimport classnames from \"classnames\";\nimport Note from \"../Note\";\nimport * as calendar from \"./calendar\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HOC(wrappedComponent) {\n  return class extends React.Component {\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"wrappedComponent\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 14\n      }, this);\n    }\n\n  };\n}\n\n_c = HOC;\nexport default class Calendar extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      date: this.props.date,\n      currentDate: new Date(),\n      selectedDate: null,\n      prevMonth: this.props.date.getMonth() - 1\n    };\n\n    this.handlePrevMonthButtonClick = () => {\n      const date = new Date(this.year, this.month - 1);\n      this.setState({\n        date: date,\n        prevMonth: date\n      });\n    };\n\n    this.handleNextMonthButtonClick = () => {\n      const date = new Date(this.year, this.month + 1);\n      this.setState({\n        date: date,\n        prevMonth: date\n      });\n    };\n\n    this.handleSelectChange = () => {\n      const year = this.yearSelect.value;\n      const month = this.monthSelect.value;\n      const date = new Date(year, month);\n      this.setState({\n        date\n      });\n    };\n\n    this.handleDayClick = date => {\n      this.setState({\n        selectedDate: date\n      });\n      this.props.onChange(date);\n    };\n  }\n\n  get year() {\n    return this.state.date.getFullYear();\n  }\n\n  get month() {\n    return this.state.date.getMonth();\n  }\n\n  get day() {\n    return this.state.date.getDate();\n  }\n\n  render() {\n    const Notes = HOC( /*#__PURE__*/_jsxDEV(Note, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 23\n    }, this));\n    console.log(Notes);\n    const {\n      years,\n      monthNames,\n      weekDayNames\n    } = this.props;\n    const {\n      currentDate,\n      selectedDate,\n      date\n    } = this.state;\n    const monthData = calendar.getMonthData(this.year, this.month);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handlePrevMonthButtonClick,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          ref: element => this.monthSelect = element,\n          value: this.month,\n          onChange: this.handleSelectChange,\n          children: monthNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: name\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          ref: element => this.yearSelect = element,\n          value: this.year,\n          onChange: this.handleSelectChange,\n          children: years.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: year\n          }, year, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleNextMonthButtonClick,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: weekDayNames.map(name => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: name\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: monthData.map((week, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"week\",\n            children: week.map((Date, index) => Date ? /*#__PURE__*/_jsxDEV(\"td\", {\n              className: classnames(\"day\", {\n                today: calendar.areEqual(Date, currentDate),\n                selected: calendar.areEqual(Date, selectedDate),\n                prevMonthDay: calendar.areNotEqual(Date, date)\n              }),\n              onClick: () => this.handleDayClick(Date),\n              children: Date.getDate()\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"td\", {}, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 21\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*import React, { Component } from \"react\";\nimport * as calendar from \"./calendar\";\nimport \"./index.css\";\nimport classnames from \"classnames\";\nclass Calendar extends Component {\n  static defaultProps = {\n    date: new Date(),\n    years: [\n      2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,\n      2022,\n    ],\n    monthNames: [\n      \"Январь\",\n      \"Февраль\",\n      \"Март\",\n      \"Апрель\",\n      \"Май\",\n      \"Июнь\",\n      \"Июль\",\n      \"Август\",\n      \"Сентябрь\",\n      \"Октябрь\",\n      \"Ноябрь\",\n      \"Декабрь\",\n    ],\n    weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вc\"],\n    onChange: Function.prototype,\n  };\n  constructor(props) {\n    super(props);\n    this.handlePrevMonthButtonClick =\n      this.handlePrevMonthButtonClick.bind(this);\n    this.handleNextMonthButtonClick =\n      this.handleNextMonthButtonClick.bind(this);\n    this.handleSelectedChange = this.handleSelectedChange.bind(this);\n  }\n  state = {\n    date: this.props.date,\n    CurrentDate: new Date(),\n    selectedDate: null,\n  };\n  /*get year() {\n    return this.state.date.getFullYear();\n  }\n  get month() {\n    return this.state.date.getMonth();\n  }\n  handlePrevMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() - 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleNextMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() + 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleSelectedChange() {\n    const year = this.yearSelect.value;\n    const month = this.monthSelect.value;\n    const date = new Date(year, month);\n    console.log(date);\n    this.setState({ date });\n  }\n  handleDayClick(date) {\n    console.log(date);\n    this.setState({ selectedDate: date });\n\n    this.props.onChange(date);\n  }\n  render() {\n    const { years, monthNames, weekDayNames } = this.props;\n    const { CurrentDate, selectedDate } = this.props;\n    const monthData = calendar.getMonthData(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth()\n    );\n    return (\n      <div className=\"calendar\">\n        <header>\n          <button onClick={this.handlePrevMonthButtonClick}>{\"<\"}</button>\n          <select\n            value={this.state.date.getMonth()}\n            ref={(element) => (this.monthSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {monthNames.map((monthName, index) => (\n              <option key={monthName} value={index}>\n                {monthName}\n              </option>\n            ))}\n          </select>\n          <select\n            defaultValue={this.state.date.getFullYear()}\n            ref={(element) => (this.yearSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {years.map((yearName) => (\n              <option key={yearName} value={yearName}>\n                {yearName}\n              </option>\n            ))}\n          </select>\n          <button onClick={this.handleNextMonthButtonClick}>{\">\"}</button>\n        </header>\n        <table>\n          <thead>\n            <tr>\n              {weekDayNames.map((weekDay) => (\n                <td key={weekDay}>{weekDay}</td>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {monthData.map((week, index) => (\n              <tr key={index} className=\"week\">\n                {week.map((date, index) =>\n                  date ? (\n                    <td\n                      key={index}\n                      className={\n                        (classnames(\"day\"),\n                        {\n                          'today': calendar.areEqual(date, CurrentDate),\n                          'selected': calendar.areEqual(date, selectedDate),\n                        })\n                      }\n                      onClick={() => this.handleDayClick(date)}\n                    >\n                      {date.getDate()}\n                    </td>\n                  ) : (\n                    <td key={index} />\n                  )\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Calendar;*/\n\nCalendar.defaultProps = {\n  date: new Date(),\n  years: [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022],\n  monthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\n  weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"],\n  onChange: Function.prototype\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"HOC\");","map":{"version":3,"sources":["/Users/egormartinovich/labwork7reactjs/src/components/Calendar/index.jsx"],"names":["React","classnames","Note","calendar","HOC","wrappedComponent","Component","render","Calendar","state","date","props","currentDate","Date","selectedDate","prevMonth","getMonth","handlePrevMonthButtonClick","year","month","setState","handleNextMonthButtonClick","handleSelectChange","yearSelect","value","monthSelect","handleDayClick","onChange","getFullYear","day","getDate","Notes","console","log","years","monthNames","weekDayNames","monthData","getMonthData","element","map","name","index","week","today","areEqual","selected","prevMonthDay","areNotEqual","defaultProps","Function","prototype"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport Note from \"../Note\";\nimport * as calendar from \"./calendar\";\n\nimport \"./index.css\";\nfunction HOC(wrappedComponent) {\n  return class extends React.Component {\n    render() {\n      return <wrappedComponent></wrappedComponent>;\n    }\n  };\n}\nexport default class Calendar extends React.Component {\n  static defaultProps = {\n    date: new Date(),\n    years: [\n      2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,\n      2022,\n    ],\n    monthNames: [\n      \"Январь\",\n      \"Февраль\",\n      \"Март\",\n      \"Апрель\",\n      \"Май\",\n      \"Июнь\",\n      \"Июль\",\n      \"Август\",\n      \"Сентябрь\",\n      \"Октябрь\",\n      \"Ноябрь\",\n      \"Декабрь\",\n    ],\n    weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"],\n    onChange: Function.prototype,\n  };\n\n  state = {\n    date: this.props.date,\n    currentDate: new Date(),\n    selectedDate: null,\n    prevMonth: this.props.date.getMonth() - 1,\n  };\n\n  get year() {\n    return this.state.date.getFullYear();\n  }\n\n  get month() {\n    return this.state.date.getMonth();\n  }\n\n  get day() {\n    return this.state.date.getDate();\n  }\n\n  handlePrevMonthButtonClick = () => {\n    const date = new Date(this.year, this.month - 1);\n\n    this.setState({ date: date, prevMonth: date });\n  };\n\n  handleNextMonthButtonClick = () => {\n    const date = new Date(this.year, this.month + 1);\n\n    this.setState({ date: date, prevMonth: date });\n  };\n\n  handleSelectChange = () => {\n    const year = this.yearSelect.value;\n    const month = this.monthSelect.value;\n\n    const date = new Date(year, month);\n\n    this.setState({ date });\n  };\n\n  handleDayClick = (date) => {\n    this.setState({ selectedDate: date });\n\n    this.props.onChange(date);\n  };\n\n  render() {\n    const Notes = HOC(<Note></Note>);\n    console.log(Notes);\n    const { years, monthNames, weekDayNames } = this.props;\n    const { currentDate, selectedDate, date } = this.state;\n\n    const monthData = calendar.getMonthData(this.year, this.month);\n\n    return (\n      <div className=\"calendar\">\n        <header>\n          <button onClick={this.handlePrevMonthButtonClick}>{\"<\"}</button>\n\n          <select\n            ref={(element) => (this.monthSelect = element)}\n            value={this.month}\n            onChange={this.handleSelectChange}\n          >\n            {monthNames.map((name, index) => (\n              <option key={name} value={index}>\n                {name}\n              </option>\n            ))}\n          </select>\n\n          <select\n            ref={(element) => (this.yearSelect = element)}\n            value={this.year}\n            onChange={this.handleSelectChange}\n          >\n            {years.map((year) => (\n              <option key={year} value={year}>\n                {year}\n              </option>\n            ))}\n          </select>\n\n          <button onClick={this.handleNextMonthButtonClick}>{\">\"}</button>\n        </header>\n\n        <table>\n          <thead>\n            <tr>\n              {weekDayNames.map((name) => (\n                <th key={name}>{name}</th>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {monthData.map((week, index) => (\n              <tr key={index} className=\"week\">\n                {week.map((Date, index) =>\n                  Date ? (\n                    <td\n                      key={index}\n                      className={classnames(\"day\", {\n                        today: calendar.areEqual(Date, currentDate),\n                        selected: calendar.areEqual(Date, selectedDate),\n                        prevMonthDay: calendar.areNotEqual(Date, date),\n                      })}\n                      onClick={() => this.handleDayClick(Date)}\n                    >\n                      {Date.getDate()}\n                    </td>\n                  ) : (\n                    <td key={index} />\n                  )\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n/*import React, { Component } from \"react\";\nimport * as calendar from \"./calendar\";\nimport \"./index.css\";\nimport classnames from \"classnames\";\nclass Calendar extends Component {\n  static defaultProps = {\n    date: new Date(),\n    years: [\n      2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,\n      2022,\n    ],\n    monthNames: [\n      \"Январь\",\n      \"Февраль\",\n      \"Март\",\n      \"Апрель\",\n      \"Май\",\n      \"Июнь\",\n      \"Июль\",\n      \"Август\",\n      \"Сентябрь\",\n      \"Октябрь\",\n      \"Ноябрь\",\n      \"Декабрь\",\n    ],\n    weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вc\"],\n    onChange: Function.prototype,\n  };\n  constructor(props) {\n    super(props);\n    this.handlePrevMonthButtonClick =\n      this.handlePrevMonthButtonClick.bind(this);\n    this.handleNextMonthButtonClick =\n      this.handleNextMonthButtonClick.bind(this);\n    this.handleSelectedChange = this.handleSelectedChange.bind(this);\n  }\n  state = {\n    date: this.props.date,\n    CurrentDate: new Date(),\n    selectedDate: null,\n  };\n  /*get year() {\n    return this.state.date.getFullYear();\n  }\n  get month() {\n    return this.state.date.getMonth();\n  }\n  handlePrevMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() - 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleNextMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() + 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleSelectedChange() {\n    const year = this.yearSelect.value;\n    const month = this.monthSelect.value;\n    const date = new Date(year, month);\n    console.log(date);\n    this.setState({ date });\n  }\n  handleDayClick(date) {\n    console.log(date);\n    this.setState({ selectedDate: date });\n\n    this.props.onChange(date);\n  }\n  render() {\n    const { years, monthNames, weekDayNames } = this.props;\n    const { CurrentDate, selectedDate } = this.props;\n    const monthData = calendar.getMonthData(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth()\n    );\n    return (\n      <div className=\"calendar\">\n        <header>\n          <button onClick={this.handlePrevMonthButtonClick}>{\"<\"}</button>\n          <select\n            value={this.state.date.getMonth()}\n            ref={(element) => (this.monthSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {monthNames.map((monthName, index) => (\n              <option key={monthName} value={index}>\n                {monthName}\n              </option>\n            ))}\n          </select>\n          <select\n            defaultValue={this.state.date.getFullYear()}\n            ref={(element) => (this.yearSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {years.map((yearName) => (\n              <option key={yearName} value={yearName}>\n                {yearName}\n              </option>\n            ))}\n          </select>\n          <button onClick={this.handleNextMonthButtonClick}>{\">\"}</button>\n        </header>\n        <table>\n          <thead>\n            <tr>\n              {weekDayNames.map((weekDay) => (\n                <td key={weekDay}>{weekDay}</td>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {monthData.map((week, index) => (\n              <tr key={index} className=\"week\">\n                {week.map((date, index) =>\n                  date ? (\n                    <td\n                      key={index}\n                      className={\n                        (classnames(\"day\"),\n                        {\n                          'today': calendar.areEqual(date, CurrentDate),\n                          'selected': calendar.areEqual(date, selectedDate),\n                        })\n                      }\n                      onClick={() => this.handleDayClick(date)}\n                    >\n                      {date.getDate()}\n                    </td>\n                  ) : (\n                    <td key={index} />\n                  )\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Calendar;*/\n"]},"metadata":{},"sourceType":"module"}