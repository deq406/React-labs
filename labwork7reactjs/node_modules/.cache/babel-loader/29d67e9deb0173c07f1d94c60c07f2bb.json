{"ast":null,"code":"var _jsxFileName = \"/Users/egormartinovich/labwork7reactjs/src/components/Calendar/index.jsx\";\nimport React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport * as calendar from \"./calendar\";\nimport Note from \"../Note\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction hocCalendar(Note) {\n  class Calendar extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        date: this.props.date,\n        currentDate: new Date(),\n        selectedDate: null,\n        prevMonth: this.props.date.getMonth() - 1,\n        newNote: false\n      };\n\n      this.handlePrevMonthButtonClick = () => {\n        const date = new Date(this.year, this.month - 1);\n        this.setState({\n          date: date,\n          prevMonth: date\n        });\n      };\n\n      this.handleNextMonthButtonClick = () => {\n        const date = new Date(this.year, this.month + 1);\n        this.setState({\n          date: date,\n          prevMonth: date\n        });\n      };\n\n      this.handleSelectChange = () => {\n        const year = this.yearSelect.value;\n        const month = this.monthSelect.value;\n        const date = new Date(year, month);\n        this.setState({\n          date\n        });\n      };\n\n      this.handleDayClick = date => {\n        this.setState({\n          selectedDate: date\n        });\n        this.props.onChange(date);\n      };\n\n      this.handleDoubleClick = date => {\n        this.setState({\n          selectedDate: date,\n          newNote: true\n        });\n        this.props.onChange(date);\n        console.log(this.state.newNote);\n      };\n    }\n\n    get year() {\n      return this.state.date.getFullYear();\n    }\n\n    get month() {\n      return this.state.date.getMonth();\n    }\n\n    get day() {\n      return this.state.date.getDate();\n    }\n\n    render() {\n      const {\n        years,\n        monthNames,\n        weekDayNames\n      } = this.props;\n      const {\n        currentDate,\n        selectedDate,\n        date,\n        newNote\n      } = this.state;\n      const monthData = calendar.getMonthData(this.year, this.month);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handlePrevMonthButtonClick,\n            children: \"<\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            ref: element => this.monthSelect = element,\n            value: this.month,\n            onChange: this.handleSelectChange,\n            children: monthNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: index,\n              children: name\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            ref: element => this.yearSelect = element,\n            value: this.year,\n            onChange: this.handleSelectChange,\n            children: years.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: year,\n              children: year\n            }, year, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleNextMonthButtonClick,\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: weekDayNames.map(name => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: name\n              }, name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: monthData.map((week, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"week\",\n              children: week.map((Date, index) => Date ? /*#__PURE__*/_jsxDEV(\"td\", {\n                className: classnames(\"day\", {\n                  today: calendar.areEqual(Date, currentDate),\n                  selected: calendar.areEqual(Date, selectedDate),\n                  prevMonthDay: calendar.areNotEqual(Date, date)\n                }),\n                onClick: () => this.handleDayClick(Date),\n                children: Date.getDate()\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"td\", {}, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 23\n              }, this))\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Note, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this);\n    }\n\n  }\n\n  Calendar.defaultProps = {\n    date: new Date(),\n    years: [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022],\n    monthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\n    weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"],\n    onChange: Function.prototype\n  };\n  return hocCalendar;\n}\n\nexport default hocCalendar;\n/*import React, { Component } from \"react\";\nimport * as calendar from \"./calendar\";\nimport \"./index.css\";\nimport classnames from \"classnames\";\nclass Calendar extends Component {\n  static defaultProps = {\n    date: new Date(),\n    years: [\n      2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,\n      2022,\n    ],\n    monthNames: [\n      \"Январь\",\n      \"Февраль\",\n      \"Март\",\n      \"Апрель\",\n      \"Май\",\n      \"Июнь\",\n      \"Июль\",\n      \"Август\",\n      \"Сентябрь\",\n      \"Октябрь\",\n      \"Ноябрь\",\n      \"Декабрь\",\n    ],\n    weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вc\"],\n    onChange: Function.prototype,\n  };\n  constructor(props) {\n    super(props);\n    this.handlePrevMonthButtonClick =\n      this.handlePrevMonthButtonClick.bind(this);\n    this.handleNextMonthButtonClick =\n      this.handleNextMonthButtonClick.bind(this);\n    this.handleSelectedChange = this.handleSelectedChange.bind(this);\n  }\n  state = {\n    date: this.props.date,\n    CurrentDate: new Date(),\n    selectedDate: null,\n  };\n  /*get year() {\n    return this.state.date.getFullYear();\n  }\n  get month() {\n    return this.state.date.getMonth();\n  }\n  handlePrevMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() - 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleNextMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() + 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleSelectedChange() {\n    const year = this.yearSelect.value;\n    const month = this.monthSelect.value;\n    const date = new Date(year, month);\n    console.log(date);\n    this.setState({ date });\n  }\n  handleDayClick(date) {\n    console.log(date);\n    this.setState({ selectedDate: date });\n\n    this.props.onChange(date);\n  }\n  render() {\n    const { years, monthNames, weekDayNames } = this.props;\n    const { CurrentDate, selectedDate } = this.props;\n    const monthData = calendar.getMonthData(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth()\n    );\n    return (\n      <div className=\"calendar\">\n        <header>\n          <button onClick={this.handlePrevMonthButtonClick}>{\"<\"}</button>\n          <select\n            value={this.state.date.getMonth()}\n            ref={(element) => (this.monthSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {monthNames.map((monthName, index) => (\n              <option key={monthName} value={index}>\n                {monthName}\n              </option>\n            ))}\n          </select>\n          <select\n            defaultValue={this.state.date.getFullYear()}\n            ref={(element) => (this.yearSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {years.map((yearName) => (\n              <option key={yearName} value={yearName}>\n                {yearName}\n              </option>\n            ))}\n          </select>\n          <button onClick={this.handleNextMonthButtonClick}>{\">\"}</button>\n        </header>\n        <table>\n          <thead>\n            <tr>\n              {weekDayNames.map((weekDay) => (\n                <td key={weekDay}>{weekDay}</td>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {monthData.map((week, index) => (\n              <tr key={index} className=\"week\">\n                {week.map((date, index) =>\n                  date ? (\n                    <td\n                      key={index}\n                      className={\n                        (classnames(\"day\"),\n                        {\n                          'today': calendar.areEqual(date, CurrentDate),\n                          'selected': calendar.areEqual(date, selectedDate),\n                        })\n                      }\n                      onClick={() => this.handleDayClick(date)}\n                    >\n                      {date.getDate()}\n                    </td>\n                  ) : (\n                    <td key={index} />\n                  )\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Calendar;*/","map":{"version":3,"sources":["/Users/egormartinovich/labwork7reactjs/src/components/Calendar/index.jsx"],"names":["React","Component","classnames","calendar","Note","hocCalendar","Calendar","state","date","props","currentDate","Date","selectedDate","prevMonth","getMonth","newNote","handlePrevMonthButtonClick","year","month","setState","handleNextMonthButtonClick","handleSelectChange","yearSelect","value","monthSelect","handleDayClick","onChange","handleDoubleClick","console","log","getFullYear","day","getDate","render","years","monthNames","weekDayNames","monthData","getMonthData","element","map","name","index","week","today","areEqual","selected","prevMonthDay","areNotEqual","defaultProps","Function","prototype"],"mappings":"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":["import React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport * as calendar from \"./calendar\";\nimport Note from \"../Note\";\n\nimport \"./index.css\";\n\nfunction hocCalendar(Note) {\n  class Calendar extends React.Component {\n    static defaultProps = {\n      date: new Date(),\n      years: [\n        2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,\n        2022,\n      ],\n      monthNames: [\n        \"Январь\",\n        \"Февраль\",\n        \"Март\",\n        \"Апрель\",\n        \"Май\",\n        \"Июнь\",\n        \"Июль\",\n        \"Август\",\n        \"Сентябрь\",\n        \"Октябрь\",\n        \"Ноябрь\",\n        \"Декабрь\",\n      ],\n      weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"],\n      onChange: Function.prototype,\n    };\n\n    state = {\n      date: this.props.date,\n      currentDate: new Date(),\n      selectedDate: null,\n      prevMonth: this.props.date.getMonth() - 1,\n      newNote: false,\n    };\n\n    get year() {\n      return this.state.date.getFullYear();\n    }\n\n    get month() {\n      return this.state.date.getMonth();\n    }\n\n    get day() {\n      return this.state.date.getDate();\n    }\n\n    handlePrevMonthButtonClick = () => {\n      const date = new Date(this.year, this.month - 1);\n\n      this.setState({ date: date, prevMonth: date });\n    };\n\n    handleNextMonthButtonClick = () => {\n      const date = new Date(this.year, this.month + 1);\n\n      this.setState({ date: date, prevMonth: date });\n    };\n\n    handleSelectChange = () => {\n      const year = this.yearSelect.value;\n      const month = this.monthSelect.value;\n\n      const date = new Date(year, month);\n\n      this.setState({ date });\n    };\n\n    handleDayClick = (date) => {\n      this.setState({ selectedDate: date });\n\n      this.props.onChange(date);\n    };\n    handleDoubleClick = (date) => {\n      this.setState({ selectedDate: date, newNote: true });\n\n      this.props.onChange(date);\n      console.log(this.state.newNote);\n    };\n\n    render() {\n      const { years, monthNames, weekDayNames } = this.props;\n      const { currentDate, selectedDate, date, newNote } = this.state;\n\n      const monthData = calendar.getMonthData(this.year, this.month);\n\n      return (\n        <div className=\"calendar\">\n          <header>\n            <button onClick={this.handlePrevMonthButtonClick}>{\"<\"}</button>\n\n            <select\n              ref={(element) => (this.monthSelect = element)}\n              value={this.month}\n              onChange={this.handleSelectChange}\n            >\n              {monthNames.map((name, index) => (\n                <option key={name} value={index}>\n                  {name}\n                </option>\n              ))}\n            </select>\n\n            <select\n              ref={(element) => (this.yearSelect = element)}\n              value={this.year}\n              onChange={this.handleSelectChange}\n            >\n              {years.map((year) => (\n                <option key={year} value={year}>\n                  {year}\n                </option>\n              ))}\n            </select>\n\n            <button onClick={this.handleNextMonthButtonClick}>{\">\"}</button>\n          </header>\n\n          <table>\n            <thead>\n              <tr>\n                {weekDayNames.map((name) => (\n                  <th key={name}>{name}</th>\n                ))}\n              </tr>\n            </thead>\n\n            <tbody>\n              {monthData.map((week, index) => (\n                <tr key={index} className=\"week\">\n                  {week.map((Date, index) =>\n                    Date ? (\n                      <td\n                        key={index}\n                        className={classnames(\"day\", {\n                          today: calendar.areEqual(Date, currentDate),\n                          selected: calendar.areEqual(Date, selectedDate),\n                          prevMonthDay: calendar.areNotEqual(Date, date),\n                        })}\n                        onClick={() => this.handleDayClick(Date)}\n                      >\n                        {Date.getDate()}\n                      </td>\n                    ) : (\n                      <td key={index} />\n                    )\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <Note></Note>\n        </div>\n      );\n    }\n  }\n  return hocCalendar;\n}\nexport default hocCalendar;\n\n/*import React, { Component } from \"react\";\nimport * as calendar from \"./calendar\";\nimport \"./index.css\";\nimport classnames from \"classnames\";\nclass Calendar extends Component {\n  static defaultProps = {\n    date: new Date(),\n    years: [\n      2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,\n      2022,\n    ],\n    monthNames: [\n      \"Январь\",\n      \"Февраль\",\n      \"Март\",\n      \"Апрель\",\n      \"Май\",\n      \"Июнь\",\n      \"Июль\",\n      \"Август\",\n      \"Сентябрь\",\n      \"Октябрь\",\n      \"Ноябрь\",\n      \"Декабрь\",\n    ],\n    weekDayNames: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вc\"],\n    onChange: Function.prototype,\n  };\n  constructor(props) {\n    super(props);\n    this.handlePrevMonthButtonClick =\n      this.handlePrevMonthButtonClick.bind(this);\n    this.handleNextMonthButtonClick =\n      this.handleNextMonthButtonClick.bind(this);\n    this.handleSelectedChange = this.handleSelectedChange.bind(this);\n  }\n  state = {\n    date: this.props.date,\n    CurrentDate: new Date(),\n    selectedDate: null,\n  };\n  /*get year() {\n    return this.state.date.getFullYear();\n  }\n  get month() {\n    return this.state.date.getMonth();\n  }\n  handlePrevMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() - 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleNextMonthButtonClick() {\n    const date = new Date(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth() + 1\n    );\n    console.log(date);\n    this.setState({ date });\n  }\n  handleSelectedChange() {\n    const year = this.yearSelect.value;\n    const month = this.monthSelect.value;\n    const date = new Date(year, month);\n    console.log(date);\n    this.setState({ date });\n  }\n  handleDayClick(date) {\n    console.log(date);\n    this.setState({ selectedDate: date });\n\n    this.props.onChange(date);\n  }\n  render() {\n    const { years, monthNames, weekDayNames } = this.props;\n    const { CurrentDate, selectedDate } = this.props;\n    const monthData = calendar.getMonthData(\n      this.state.date.getFullYear(),\n      this.state.date.getMonth()\n    );\n    return (\n      <div className=\"calendar\">\n        <header>\n          <button onClick={this.handlePrevMonthButtonClick}>{\"<\"}</button>\n          <select\n            value={this.state.date.getMonth()}\n            ref={(element) => (this.monthSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {monthNames.map((monthName, index) => (\n              <option key={monthName} value={index}>\n                {monthName}\n              </option>\n            ))}\n          </select>\n          <select\n            defaultValue={this.state.date.getFullYear()}\n            ref={(element) => (this.yearSelect = element)}\n            onChange={this.handleSelectedChange}\n          >\n            {years.map((yearName) => (\n              <option key={yearName} value={yearName}>\n                {yearName}\n              </option>\n            ))}\n          </select>\n          <button onClick={this.handleNextMonthButtonClick}>{\">\"}</button>\n        </header>\n        <table>\n          <thead>\n            <tr>\n              {weekDayNames.map((weekDay) => (\n                <td key={weekDay}>{weekDay}</td>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {monthData.map((week, index) => (\n              <tr key={index} className=\"week\">\n                {week.map((date, index) =>\n                  date ? (\n                    <td\n                      key={index}\n                      className={\n                        (classnames(\"day\"),\n                        {\n                          'today': calendar.areEqual(date, CurrentDate),\n                          'selected': calendar.areEqual(date, selectedDate),\n                        })\n                      }\n                      onClick={() => this.handleDayClick(date)}\n                    >\n                      {date.getDate()}\n                    </td>\n                  ) : (\n                    <td key={index} />\n                  )\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Calendar;*/\n"]},"metadata":{},"sourceType":"module"}