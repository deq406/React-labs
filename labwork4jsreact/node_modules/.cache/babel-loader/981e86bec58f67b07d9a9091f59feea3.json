{"ast":null,"code":"const DAYS_IN_WEEK = 7;\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst Month = {\n  January: 0,\n  February: 1,\n  March: 2,\n  April: 3,\n  May: 4,\n  June: 5,\n  July: 6,\n  August: 7,\n  September: 8,\n  October: 9,\n  November: 10,\n  December: 11\n};\nconst Days = {\n  Monday: 0,\n  Tuesday: 1,\n  Wednesday: 2,\n  Thursday: 3,\n  Friday: 4,\n  Saturday: 5,\n  Sunday: 6\n};\nexport function isLeapYear(year) {\n  return !(year % 4 || !(year % 100) && year % 400);\n}\nexport function getDaysInMonth(date) {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  const daysInMonth = DAYS_IN_MONTH[month];\n\n  if (isLeapYear(year) && month === Month.February) {\n    return daysInMonth + 1;\n  } else {}\n\n  return daysInMonth;\n}\nexport function getDayOfWeek(date) {\n  const dayOfWeek = date.getDay();\n\n  if (dayOfWeek === 0) {\n    return 6;\n  } else {\n    return dayOfWeek - 1;\n  }\n}\nexport function getMonthData(year, month) {\n  const result = [];\n  const date = new Date(year, month);\n  const daysInMonth = getDaysInMonth(date);\n  const monthStartsOn = getDayOfWeek(date);\n  let day = 1;\n\n  for (let i = 0; i < (daysInMonth + monthStartsOn) / DAYS_IN_WEEK; i++) {\n    result[i] = [];\n\n    for (let j = 0; j < DAYS_IN_WEEK; j++) {\n      result[i][j] = new Date(year, month, day++);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/egormartinovich/labwork4jsreact/src/components/Calendar/calendar.js"],"names":["DAYS_IN_WEEK","DAYS_IN_MONTH","Month","January","February","March","April","May","June","July","August","September","October","November","December","Days","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","isLeapYear","year","getDaysInMonth","date","month","getMonth","getFullYear","daysInMonth","getDayOfWeek","dayOfWeek","getDay","getMonthData","result","Date","monthStartsOn","day","i","j"],"mappings":"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","sourcesContent":["const DAYS_IN_WEEK = 7;\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst Month = {\n  January: 0,\n  February: 1,\n  March: 2,\n  April: 3,\n  May: 4,\n  June: 5,\n  July: 6,\n  August: 7,\n  September: 8,\n  October: 9,\n  November: 10,\n  December: 11,\n};\nconst Days = {\n  Monday: 0,\n  Tuesday: 1,\n  Wednesday: 2,\n  Thursday: 3,\n  Friday: 4,\n  Saturday: 5,\n  Sunday: 6,\n};\nexport function isLeapYear(year) {\n  return !(year % 4 || (!(year % 100) && year % 400));\n}\nexport function getDaysInMonth(date) {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  const daysInMonth = DAYS_IN_MONTH[month];\n  if (isLeapYear(year) && month === Month.February) {\n    return daysInMonth + 1;\n  } else {\n  }\n  return daysInMonth;\n}\nexport function getDayOfWeek(date) {\n  const dayOfWeek = date.getDay();\n  if (dayOfWeek === 0) {\n    return 6;\n  } else {\n    return dayOfWeek - 1;\n  }\n}\nexport function getMonthData(year, month) {\n  const result = [];\n  const date = new Date(year, month);\n  const daysInMonth = getDaysInMonth(date);\n  const monthStartsOn = getDayOfWeek(date);\n  let day = 1;\n  for (let i = 0; i < (daysInMonth + monthStartsOn) / DAYS_IN_WEEK; i++) {\n    result[i] = [];\n    for (let j = 0; j < DAYS_IN_WEEK; j++) {\n      result[i][j] = new Date(year, month, day++);\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}