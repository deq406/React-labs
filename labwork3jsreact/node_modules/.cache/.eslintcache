[{"/Users/egormartinovich/labwork3jsreact/src/index.js":"1","/Users/egormartinovich/labwork3jsreact/src/reportWebVitals.js":"2","/Users/egormartinovich/labwork3jsreact/src/App.js":"3","/Users/egormartinovich/labwork3jsreact/src/components/phoneInput.jsx":"4","/Users/egormartinovich/labwork3jsreact/src/components/SortTable.jsx":"5"},{"size":500,"mtime":1647417645042,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1647417645043,"results":"8","hashOfConfig":"7"},{"size":238,"mtime":1648114040866,"results":"9","hashOfConfig":"7"},{"size":5378,"mtime":1648117754848,"results":"10","hashOfConfig":"7"},{"size":3698,"mtime":1653563719912,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"onvkc4",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/egormartinovich/labwork3jsreact/src/index.js",[],[],"/Users/egormartinovich/labwork3jsreact/src/reportWebVitals.js",[],[],"/Users/egormartinovich/labwork3jsreact/src/App.js",[],[],["29","30"],"/Users/egormartinovich/labwork3jsreact/src/components/phoneInput.jsx",[],[],"/Users/egormartinovich/labwork3jsreact/src/components/SortTable.jsx",["31","32","33","34","35","36","37"],[],"import React, { useState } from \"react\";\n\nconst SortTable = () => {\n  const FoodList1 = [\n    {\n      Name: \"Butter\",\n      Price: 0.9,\n      Stock: 77,\n    },\n    {\n      Name: \"Milk\",\n      Price: 1.9,\n      Stock: 0,\n    },\n  ];\n  const FoodList2 = [\n    {\n      Name: \"Butter\",\n      Price: 0.9,\n      Stock: 77,\n    },\n    {\n      Name: \"Yoghurt\",\n      Price: 2.4,\n      Stock: 12,\n    },\n    {\n      Name: \"Milk\",\n      Price: 1.9,\n      Stock: 45,\n    },\n    {\n      Name: \"Pasta\",\n      Price: 3.2,\n      Stock: 24,\n    },\n    {\n      Name: \"Bread\",\n      Price: 2.9,\n      Stock: 2,\n    },\n  ];\n  const FoodList3 = [];\n  const Width = {\n    width: \"50px\",\n  };\n  let [FoodList, setFoodList] = useState(FoodList2);\n\n  let [SortName, setSortName] = useState(false);\n  let [SortPrice, setSortPrice] = useState(false);\n  let [SortStock, setSortStock] = useState(false);\n\n  //для обратной сортировки\n  let [SortName2, setSortName2] = useState(false);\n  let [SortPrice2, setSortPrice2] = useState(false);\n  let [SortStock2, setSortStock2] = useState(false);\n\n  let [colour, setcolour] = useState({ backgroundColor: \"white\" });\n\n  FoodList2.map((val, index) => {\n    if (val.Stock < 3) {\n      colour = { backgroundColor: \"yellow\" };\n    }\n  });\n  FoodList2.map((val, index) => {\n    if (val.Stock == 0) {\n      colour = { backgroundColor: \"red\" };\n    }\n  });\n\n  function Table() {\n    if (SortName) {\n      setSortName(false);\n      FoodList.sort(function (a, b) {\n        let nameA = a.Name.toLowerCase(); // ignore upper and lowercase\n        let nameB = b.Name.toLowerCase(); // ignore upper and lowercase\n        /*return nameA - nameB*/\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      });\n\n      if (SortName2) {\n        setSortName2(false);\n      } else {\n        setSortName2(true);\n        FoodList.reverse();\n      }\n    }\n    if (SortPrice) {\n      setSortPrice(false);\n      FoodList.sort(function (a, b) {\n        return a.Price - b.Price;\n      });\n\n      if (SortPrice2) {\n        setSortPrice2(false);\n      } else {\n        setSortPrice2(true);\n        FoodList.reverse();\n      }\n    }\n    if (SortStock) {\n      setSortStock(false);\n      FoodList.sort(function (a, b) {\n        return a.Stock - b.Stock;\n      });\n\n      if (SortStock2) {\n        setSortStock2(false);\n      } else {\n        setSortStock2(true);\n        FoodList.reverse();\n      }\n    }\n    return (\n      <table>\n        {FoodList.map((food, index) => (\n          <>\n            <tr style={Width}>{index + 1}</tr>\n            <tr>{food.Name}</tr>\n            <tr>{food.Price}</tr>\n            {food.Stock < 3 ? (\n              <tr style={colour}>{food.Stock}</tr>\n            ) : (\n              <tr>{food.Stock}</tr>\n            )}\n          </>\n        ))}\n      </table>\n    );\n  }\n\n  return (\n    <div className=\"foodTable\">\n      <form action=\"\">\n        <input className=\"ID\" value=\"Num\" readOnly />\n        <input\n          type=\"text\"\n          value=\"Name\"\n          className=\"main\"\n          onClick={(e) => {\n            setSortName(true);\n          }}\n          readOnly\n        />\n        <input\n          type=\"text\"\n          value=\"Price\"\n          className=\"main\"\n          onClick={(e1) => {\n            setSortPrice(true);\n          }}\n          readOnly\n        />\n        <input\n          type=\"text\"\n          value=\"In Stock\"\n          className=\"main\"\n          onClick={(e2) => {\n            setSortStock(true);\n          }}\n          readOnly\n        />\n      </form>\n      {Table()}\n    </div>\n  );\n};\n\nexport default SortTable;\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":4,"column":9,"nodeType":"44","messageId":"45","endLine":4,"endColumn":18},{"ruleId":"42","severity":1,"message":"46","line":43,"column":9,"nodeType":"44","messageId":"45","endLine":43,"endColumn":18},{"ruleId":"42","severity":1,"message":"47","line":47,"column":18,"nodeType":"44","messageId":"45","endLine":47,"endColumn":29},{"ruleId":"42","severity":1,"message":"48","line":58,"column":16,"nodeType":"44","messageId":"45","endLine":58,"endColumn":25},{"ruleId":"49","severity":1,"message":"50","line":60,"column":30,"nodeType":"51","messageId":"52","endLine":60,"endColumn":32},{"ruleId":"49","severity":1,"message":"50","line":65,"column":30,"nodeType":"51","messageId":"52","endLine":65,"endColumn":32},{"ruleId":"53","severity":1,"message":"54","line":66,"column":19,"nodeType":"55","messageId":"56","endLine":66,"endColumn":21},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'FoodList1' is assigned a value but never used.","Identifier","unusedVar","'FoodList3' is assigned a value but never used.","'setFoodList' is assigned a value but never used.","'setcolour' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]